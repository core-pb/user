// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/service_tag.proto

package userconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/core-pb/user/user/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TagName is the fully-qualified name of the Tag service.
	TagName = "user.v1.Tag"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TagGetTagProcedure is the fully-qualified name of the Tag's GetTag RPC.
	TagGetTagProcedure = "/user.v1.Tag/GetTag"
	// TagSetTagTypeProcedure is the fully-qualified name of the Tag's SetTagType RPC.
	TagSetTagTypeProcedure = "/user.v1.Tag/SetTagType"
	// TagDeleteTagTypeProcedure is the fully-qualified name of the Tag's DeleteTagType RPC.
	TagDeleteTagTypeProcedure = "/user.v1.Tag/DeleteTagType"
	// TagSetTagProcedure is the fully-qualified name of the Tag's SetTag RPC.
	TagSetTagProcedure = "/user.v1.Tag/SetTag"
	// TagDeleteTagProcedure is the fully-qualified name of the Tag's DeleteTag RPC.
	TagDeleteTagProcedure = "/user.v1.Tag/DeleteTag"
	// TagSetUserTagProcedure is the fully-qualified name of the Tag's SetUserTag RPC.
	TagSetUserTagProcedure = "/user.v1.Tag/SetUserTag"
	// TagDeleteUserTagProcedure is the fully-qualified name of the Tag's DeleteUserTag RPC.
	TagDeleteUserTagProcedure = "/user.v1.Tag/DeleteUserTag"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tagServiceDescriptor             = v1.File_user_v1_service_tag_proto.Services().ByName("Tag")
	tagGetTagMethodDescriptor        = tagServiceDescriptor.Methods().ByName("GetTag")
	tagSetTagTypeMethodDescriptor    = tagServiceDescriptor.Methods().ByName("SetTagType")
	tagDeleteTagTypeMethodDescriptor = tagServiceDescriptor.Methods().ByName("DeleteTagType")
	tagSetTagMethodDescriptor        = tagServiceDescriptor.Methods().ByName("SetTag")
	tagDeleteTagMethodDescriptor     = tagServiceDescriptor.Methods().ByName("DeleteTag")
	tagSetUserTagMethodDescriptor    = tagServiceDescriptor.Methods().ByName("SetUserTag")
	tagDeleteUserTagMethodDescriptor = tagServiceDescriptor.Methods().ByName("DeleteUserTag")
)

// TagClient is a client for the user.v1.Tag service.
type TagClient interface {
	GetTag(context.Context, *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.GetTagResponse], error)
	SetTagType(context.Context, *connect.Request[v1.SetTagTypeRequest]) (*connect.Response[v1.SetTagTypeResponse], error)
	DeleteTagType(context.Context, *connect.Request[v1.DeleteTagTypeRequest]) (*connect.Response[v1.DeleteTagTypeResponse], error)
	SetTag(context.Context, *connect.Request[v1.SetTagRequest]) (*connect.Response[v1.SetTagResponse], error)
	DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error)
	SetUserTag(context.Context, *connect.Request[v1.SetUserTagRequest]) (*connect.Response[v1.SetUserTagResponse], error)
	DeleteUserTag(context.Context, *connect.Request[v1.DeleteUserTagRequest]) (*connect.Response[v1.DeleteUserTagResponse], error)
}

// NewTagClient constructs a client for the user.v1.Tag service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTagClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TagClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tagClient{
		getTag: connect.NewClient[v1.GetTagRequest, v1.GetTagResponse](
			httpClient,
			baseURL+TagGetTagProcedure,
			connect.WithSchema(tagGetTagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setTagType: connect.NewClient[v1.SetTagTypeRequest, v1.SetTagTypeResponse](
			httpClient,
			baseURL+TagSetTagTypeProcedure,
			connect.WithSchema(tagSetTagTypeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTagType: connect.NewClient[v1.DeleteTagTypeRequest, v1.DeleteTagTypeResponse](
			httpClient,
			baseURL+TagDeleteTagTypeProcedure,
			connect.WithSchema(tagDeleteTagTypeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setTag: connect.NewClient[v1.SetTagRequest, v1.SetTagResponse](
			httpClient,
			baseURL+TagSetTagProcedure,
			connect.WithSchema(tagSetTagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTag: connect.NewClient[v1.DeleteTagRequest, v1.DeleteTagResponse](
			httpClient,
			baseURL+TagDeleteTagProcedure,
			connect.WithSchema(tagDeleteTagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setUserTag: connect.NewClient[v1.SetUserTagRequest, v1.SetUserTagResponse](
			httpClient,
			baseURL+TagSetUserTagProcedure,
			connect.WithSchema(tagSetUserTagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteUserTag: connect.NewClient[v1.DeleteUserTagRequest, v1.DeleteUserTagResponse](
			httpClient,
			baseURL+TagDeleteUserTagProcedure,
			connect.WithSchema(tagDeleteUserTagMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// tagClient implements TagClient.
type tagClient struct {
	getTag        *connect.Client[v1.GetTagRequest, v1.GetTagResponse]
	setTagType    *connect.Client[v1.SetTagTypeRequest, v1.SetTagTypeResponse]
	deleteTagType *connect.Client[v1.DeleteTagTypeRequest, v1.DeleteTagTypeResponse]
	setTag        *connect.Client[v1.SetTagRequest, v1.SetTagResponse]
	deleteTag     *connect.Client[v1.DeleteTagRequest, v1.DeleteTagResponse]
	setUserTag    *connect.Client[v1.SetUserTagRequest, v1.SetUserTagResponse]
	deleteUserTag *connect.Client[v1.DeleteUserTagRequest, v1.DeleteUserTagResponse]
}

// GetTag calls user.v1.Tag.GetTag.
func (c *tagClient) GetTag(ctx context.Context, req *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.GetTagResponse], error) {
	return c.getTag.CallUnary(ctx, req)
}

// SetTagType calls user.v1.Tag.SetTagType.
func (c *tagClient) SetTagType(ctx context.Context, req *connect.Request[v1.SetTagTypeRequest]) (*connect.Response[v1.SetTagTypeResponse], error) {
	return c.setTagType.CallUnary(ctx, req)
}

// DeleteTagType calls user.v1.Tag.DeleteTagType.
func (c *tagClient) DeleteTagType(ctx context.Context, req *connect.Request[v1.DeleteTagTypeRequest]) (*connect.Response[v1.DeleteTagTypeResponse], error) {
	return c.deleteTagType.CallUnary(ctx, req)
}

// SetTag calls user.v1.Tag.SetTag.
func (c *tagClient) SetTag(ctx context.Context, req *connect.Request[v1.SetTagRequest]) (*connect.Response[v1.SetTagResponse], error) {
	return c.setTag.CallUnary(ctx, req)
}

// DeleteTag calls user.v1.Tag.DeleteTag.
func (c *tagClient) DeleteTag(ctx context.Context, req *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error) {
	return c.deleteTag.CallUnary(ctx, req)
}

// SetUserTag calls user.v1.Tag.SetUserTag.
func (c *tagClient) SetUserTag(ctx context.Context, req *connect.Request[v1.SetUserTagRequest]) (*connect.Response[v1.SetUserTagResponse], error) {
	return c.setUserTag.CallUnary(ctx, req)
}

// DeleteUserTag calls user.v1.Tag.DeleteUserTag.
func (c *tagClient) DeleteUserTag(ctx context.Context, req *connect.Request[v1.DeleteUserTagRequest]) (*connect.Response[v1.DeleteUserTagResponse], error) {
	return c.deleteUserTag.CallUnary(ctx, req)
}

// TagHandler is an implementation of the user.v1.Tag service.
type TagHandler interface {
	GetTag(context.Context, *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.GetTagResponse], error)
	SetTagType(context.Context, *connect.Request[v1.SetTagTypeRequest]) (*connect.Response[v1.SetTagTypeResponse], error)
	DeleteTagType(context.Context, *connect.Request[v1.DeleteTagTypeRequest]) (*connect.Response[v1.DeleteTagTypeResponse], error)
	SetTag(context.Context, *connect.Request[v1.SetTagRequest]) (*connect.Response[v1.SetTagResponse], error)
	DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error)
	SetUserTag(context.Context, *connect.Request[v1.SetUserTagRequest]) (*connect.Response[v1.SetUserTagResponse], error)
	DeleteUserTag(context.Context, *connect.Request[v1.DeleteUserTagRequest]) (*connect.Response[v1.DeleteUserTagResponse], error)
}

// NewTagHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTagHandler(svc TagHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tagGetTagHandler := connect.NewUnaryHandler(
		TagGetTagProcedure,
		svc.GetTag,
		connect.WithSchema(tagGetTagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tagSetTagTypeHandler := connect.NewUnaryHandler(
		TagSetTagTypeProcedure,
		svc.SetTagType,
		connect.WithSchema(tagSetTagTypeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tagDeleteTagTypeHandler := connect.NewUnaryHandler(
		TagDeleteTagTypeProcedure,
		svc.DeleteTagType,
		connect.WithSchema(tagDeleteTagTypeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tagSetTagHandler := connect.NewUnaryHandler(
		TagSetTagProcedure,
		svc.SetTag,
		connect.WithSchema(tagSetTagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tagDeleteTagHandler := connect.NewUnaryHandler(
		TagDeleteTagProcedure,
		svc.DeleteTag,
		connect.WithSchema(tagDeleteTagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tagSetUserTagHandler := connect.NewUnaryHandler(
		TagSetUserTagProcedure,
		svc.SetUserTag,
		connect.WithSchema(tagSetUserTagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tagDeleteUserTagHandler := connect.NewUnaryHandler(
		TagDeleteUserTagProcedure,
		svc.DeleteUserTag,
		connect.WithSchema(tagDeleteUserTagMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/user.v1.Tag/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TagGetTagProcedure:
			tagGetTagHandler.ServeHTTP(w, r)
		case TagSetTagTypeProcedure:
			tagSetTagTypeHandler.ServeHTTP(w, r)
		case TagDeleteTagTypeProcedure:
			tagDeleteTagTypeHandler.ServeHTTP(w, r)
		case TagSetTagProcedure:
			tagSetTagHandler.ServeHTTP(w, r)
		case TagDeleteTagProcedure:
			tagDeleteTagHandler.ServeHTTP(w, r)
		case TagSetUserTagProcedure:
			tagSetUserTagHandler.ServeHTTP(w, r)
		case TagDeleteUserTagProcedure:
			tagDeleteUserTagHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTagHandler returns CodeUnimplemented from all methods.
type UnimplementedTagHandler struct{}

func (UnimplementedTagHandler) GetTag(context.Context, *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.GetTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.Tag.GetTag is not implemented"))
}

func (UnimplementedTagHandler) SetTagType(context.Context, *connect.Request[v1.SetTagTypeRequest]) (*connect.Response[v1.SetTagTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.Tag.SetTagType is not implemented"))
}

func (UnimplementedTagHandler) DeleteTagType(context.Context, *connect.Request[v1.DeleteTagTypeRequest]) (*connect.Response[v1.DeleteTagTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.Tag.DeleteTagType is not implemented"))
}

func (UnimplementedTagHandler) SetTag(context.Context, *connect.Request[v1.SetTagRequest]) (*connect.Response[v1.SetTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.Tag.SetTag is not implemented"))
}

func (UnimplementedTagHandler) DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.Tag.DeleteTag is not implemented"))
}

func (UnimplementedTagHandler) SetUserTag(context.Context, *connect.Request[v1.SetUserTagRequest]) (*connect.Response[v1.SetUserTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.Tag.SetUserTag is not implemented"))
}

func (UnimplementedTagHandler) DeleteUserTag(context.Context, *connect.Request[v1.DeleteUserTagRequest]) (*connect.Response[v1.DeleteUserTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.Tag.DeleteUserTag is not implemented"))
}
